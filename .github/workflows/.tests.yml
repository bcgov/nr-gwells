name: .Tests

on:
  workflow_call:
    inputs:
      ### Required
      target:
        description: PR number, test or prod
        required: true
        type: string

      ### Typical / recommended
      triggers:
        description: Bash array to diff for build triggering; omit to always fire
        required: false
        type: string

env:
  DOMAIN: apps.silver.devops.gov.bc.ca
  PREFIX: ${{ github.event.repository.name }}-${{ inputs.target }}

jobs:
  unit-test:
    name: Unit Tests
    # if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    continue-on-error: true
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build -t nr-gwells-backend-image --no-cache ./backend

      - name: Run Migrations
        run: |
          docker run --rm -e PG_PRIMARY_HOST=gwells-164-database -e DB_NAME=postgresql -e PG_USER=${{ vars.PG_USER }} -e PG_HOST=5432 -e PG_PRIMARY_PASSWORD=${{ secrets.PG_PRIMARY_PASSWORD}} nr-gwells-backend-image python3 manage.py migrate
          
      - name: Run Tests
        run: docker run --rm -e PG_PRIMARY_HOST=gwells-164-database -e DB_NAME=postgresql -e PG_USER=${{ vars.PG_USER }} -e PG_HOST=5432 -e PG_PRIMARY_PASSWORD=${{ secrets.PG_PRIMARY_PASSWORD}} nr-gwells-backend-image python3 manage.py test

      # - name: Set up Python
      #   uses: actions/setup-python@v3
      #   with:
      #     python-version: '3.7'

      # - name: Install GDAL dependencies
      #   run: sudo apt update && sudo apt install -y gdal-bin libgdal-dev

      # - name: Upgrade pip
      #   run: python3 -m pip install --upgrade pip

      # - name: Install Numpy
      #   run: python3 -m pip install numpy

      # - name: Install ptvsd
      #   run: python3 -m pip install ptvsd

      # - name: Install Setuptools
      #   run: python3 -m pip install 'setuptools<58.0'

      # - name: Install Dependencies
      #   run: python3 -m pip install -r requirements.txt --verbose
      #   working-directory: ./backend

      # - name: Run Django Tests
      #   run: python3 manage.py test
      #   working-directory: ./backend
     
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: TODO Tests
        run: echo "The automated test suite is not set up yet."
        
  # integration-tests:
  #   name: Integration
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 1
  #   steps:
  #     - uses: actions/checkout@v4
  #     - id: cache-npm
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-cache-node-modules-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - env:
  #         API_NAME: nest
  #         BASE_URL: https://${{ github.event.repository.name }}-${{ inputs.target }}-frontend.${{ env.DOMAIN }}
  #       run: |
  #         cd tests/integration
  #         npm ci
  #         node src/main.js

  # e2e-tests:
  #   name: E2E
  #   defaults:
  #     run:
  #       working-directory: frontend
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   strategy:
  #     matrix:
  #       project: [ chromium, Google Chrome, firefox, safari, Microsoft Edge ]
  #   steps:
  #     - uses: actions/checkout@v4
  #       name: Checkout
  #     - uses: actions/setup-node@v4
  #       name: Setup Node
  #       with:
  #         node-version: 20
  #         cache: 'npm'
  #         cache-dependency-path: frontend/package-lock.json
  #     - name: Install dependencies
  #       run: |
  #         npm ci
  #         npx playwright install --with-deps

  #     - name: Run Tests
  #       env:
  #         E2E_BASE_URL: https://${{ github.event.repository.name }}-${{ inputs.target }}-frontend.${{ env.DOMAIN }}/
  #         CI: 'true'
  #       run: |
  #         npx playwright test --project="${{ matrix.project }}" --reporter=html

  #     - uses: actions/upload-artifact@v4
  #       if: ${{ !cancelled() }}
  #       name: upload results
  #       with:
  #         name: playwright-report-${{ matrix.project }}
  #         path: "./frontend/playwright-report" # path from current folder
  #         retention-days: 7

  # load-tests:
  #   name: Load
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       name: [backend, frontend]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: grafana/k6-action@v0.3.1
  #       env:
  #         BACKEND_URL: https://${{ env.PREFIX }}-frontend.${{ env.DOMAIN }}/api
  #         FRONTEND_URL: https://${{ env.PREFIX }}-frontend.${{ env.DOMAIN }}
  #       with:
  #         filename: ./tests/load/${{ matrix.name }}-test.js
  #         flags: --vus 10 --duration 30s
